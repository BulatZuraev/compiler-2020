-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |
--        If     (expr, stmt, stmt) |
--        While  (expr, stmt)       |
--        Repeat (stmt, expr)

fun eval (c@[st, w], stmt) {
  case stmt of
    Skip -> c
  | Seq (s1, s2) -> eval (eval (c, s1), s2)
  | Read (var) -> case w.readWorld of
                    [val, w1] -> [st <- [var, val], w1]
                  esac
  | Write (expr) -> [st, writeWorld (evalExpr (st, expr), w)]
  | Assn (var, expr) -> [st <- [var, evalExpr (st, expr)], w]
  | If (expr, s1, s2) -> if evalExpr (st, expr) then
                          eval (c, s1) else eval (c, s2) fi
  | While (expr, s) -> if evalExpr (st, expr) then
                        eval (eval (c, s), stmt) else c fi
  | Repeat (s, expr) -> eval (eval (c, s), While (Binop ("==", expr, Const (0)), s))
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
