-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
fun eval (c, stmt) {
  case stmt of
    Seq (s1, s2) -> {
                      local c1;
                      c1 := eval (c, s1);
                      return eval (c1, s2)
                    }
  | Read (var) -> {
                    local valWorld, st;
                    valWorld := c.snd.readWorld;
                    st := c.fst <- [var, valWorld.fst];
                    return [st, valWorld.snd]
                  }
  | Write (expr) -> {
                      local res = evalExpr (c.fst, expr);
                      return [c.fst, writeWorld (res, c.snd)]
                    }
  | Assn (var, expr) -> {
                          local res = evalExpr (c.fst, expr);
                          local st = c.fst <- [var, res];
                          return [st, c.snd]
                        }
  esac;
  return
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
