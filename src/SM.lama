-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Builtins;
import Util;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  -- Shows a location (a reference to function argument, local or global variable)
  fun showLoc (d) {
    case d of
      Arg (i) -> sprintf ("arg[%d]", i)
    | Loc (i) -> sprintf ("loc[%d]", i)
    | Glb (x) -> x
    esac
  }
  
  case i of
    READ             -> "READ"
  | WRITE            -> "WRITE"
  | BINOP  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | STI              -> "STI"
  | CONST  (n)       -> sprintf ("CONST %d", n)
  | LABEL  (s)       -> sprintf ("LABEL %s", s)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP   (c, l)    -> sprintf ("CJMP %s, %s", c, l)
  | CALL   (f, n)    -> sprintf ("CALL %s, %d", f, n)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBAL (x)       -> sprintf ("GLOBAL %s", x)
  | END              -> sprintf ("END")
  | DUP              -> "DUP"
  | DROP             -> "DROP"
  | STRING (s)       -> sprintf ("STRING ""%s""", s)
  | ARRAY  (n)       -> sprintf ("ARRAY %d", n)
  | STA              -> "STA"
  | ELEM             -> "ELEM"
  | BUILTIN (f, n)   -> sprintf ("BUILTIN %s, %d", f, n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  local map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval (env, w, insns) {
  -- Global state maps names of global variables to values
  local globalState = ref (fun (x) {error (sprintf ("name ""%s"" is undefined", x), getLoc (x))});
  
  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  -- Lookups a location in local/global states
  fun lookup ([args, locs], loc) {
    case loc of
      Arg (i) -> args[i]
    | Loc (i) -> locs[i]
    | Glb (x) -> deref (globalState) (x)
    esac 
  }

  -- Assigns a value to a location
  fun assign ([args, locs], loc, val) {
    case loc of
      Arg (i) -> args[i] := val
    | Loc (i) -> locs[i] := val
    | Glb (x) -> local g = deref (globalState);
                 globalState ::= fun (y) {if compare (x, y) == 0 then val else g (y) fi}
    esac
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
      then [list, acc]
      else inner (n-1, list.hd : acc, list.tl)
      fi
    }

    inner (n, {}, list)
  }

  fun putArgs(st, i, args) {
    case args of
      arg : args -> assign(st, Arg (i), arg);
                    putArgs(st, i + 1, args)
    | {} -> skip
    esac
  }

  -- Core interpreter: takes a configuration and a program, returns a configuration
  fun eval (c@[stack, cst, st, w], insns) {
    case insns of
      cmd : insns -> case cmd of
                       BINOP (op) -> case stack of
                                       y : x : stack -> eval([evalOp(op, x, y) : stack, cst, st, w], insns)
                                     esac
                     | CONST (const) -> eval([const : stack, cst, st, w], insns)
                     | READ -> case readWorld(w) of
                                 [val, w] -> eval([val : stack, cst, st, w], insns)
                               esac
                     | WRITE -> case stack of
                                  z : _ -> eval([stack, cst, st, writeWorld(z, w)], insns)
                                esac
                     | LD (var) -> eval([lookup(st, var) : stack, cst, st, w], insns)
                     | ST (var) -> case stack of
                                     z : _ -> assign(st, var, z);
                                              eval([stack, cst, st, w], insns)
                                   esac
                     | LABEL (_) -> eval(c, insns)
                     | JMP (l) -> eval(c, fromLabel(env,l))
                     | CJMP (c, l) -> case c of
                                        "z" -> case stack of
                                                 0 : stack -> eval([stack, cst, st, w], fromLabel(env, l))
                                               | _ : stack -> eval([stack, cst, st, w], insns)
                                               esac
                                      | "nz" -> case stack of
                                                  0 : stack -> eval([stack, cst, st, w], insns)
                                                | _ : stack -> eval([stack, cst, st, w], fromLabel(env, l))
                                                esac
                                      esac
                     | LDA (var) -> eval([Ref (var) : stack, cst, st, w], insns)
                     | STI -> case stack of
                                z : Ref (var) : stack -> assign(st, var, z);
                                                         eval([z : stack, cst, st, w], insns)
                              esac
                     | DROP -> case stack of _ : stack -> eval([stack, cst, st, w], insns) esac
                     | CALL (f, _) -> eval([stack, [st, insns] : cst, st, w], fromLabel(env, f))
                     | BEGIN (_, a, l) -> case take(stack, a) of
                                            [stack, args] -> case makeState(a, l) of
                                                               st -> putArgs(st, 0, args);
                                                                     eval([stack, cst, st, w], insns)
                                                             esac
                                          esac
                     | GLOBAL (var) -> assign(st, Glb (var), 0);
                                       eval([stack, cst, st, w], insns)
                     | END -> case cst of
                                [st, insns] : cst -> eval([stack, cst, st, w], insns)
                              | {} -> c
                              esac
                     | STRING (str) -> eval([str : stack, cst, st, w], insns)
                     | ARRAY (n) -> case take(stack, n) of
                                      [stack, args] -> eval([listArray(args) : stack, cst, st, w], insns)
                                    esac
                     | STA -> case stack of
                                v : i : a : stack -> a[i] := v;
                                                     eval([v : stack, cst, st, w], insns)
                              esac
                     | ELEM -> case stack of
                                 i : a : stack -> eval([a[i] : stack, cst, st, w], insns)
                               esac
                     | BUILTIN (f, n) -> case take(stack, n) of
                                           [stack, args] -> case evalBuiltin(f, args, w) of
                                                              [val, w] -> eval([val : stack, cst, st, w], insns)
                                                            esac
                                         esac
                     esac
    | {} -> c
    esac
  }
  eval ([{}, {}, makeState (0, 0), w], insns) [3].getOutput
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, functions) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function 
  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : functions)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, functions)
  }

  -- Adds a local variable for the current function
  fun addVar (name) {
    if isGlobal ()
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun (name, fLabel, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Fun (fLabel, nargs)), nLocals, nArgs, functions)
  }
  
  -- Enters a function
  fun beginFun (state) {
    makeCompEnv (nLabels, 2, enterFunction (state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns () {
    [functions, makeCompEnv (nLabels, scopeDepth, state, nArgs, nLocals, {})]
  }

  -- Lookups a name of a variable
  fun lookupVar (name) {
    case lookup (state, name) of
      Fun (_, _) -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
    | x          -> x
    esac
  }

  -- Lookups a name of a function
  fun lookupFun (name) {
    case lookup (state, name) of
      x@Fun (_, _) -> x
    | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals () {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel (name) {
     if isGlobal ()
     then [sprintf ("L%s", name),             makeCompEnv (nLabels  , scopeDepth, state, nLocals, nArgs, functions)]
     else [sprintf ("L%s_%d", name, nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
     fi 
  }

  -- Checks if the current scope is a global
  fun isGlobal () {
    scopeDepth == 2
  }
  
  [genLabel,
   rememberFun,
   beginScope,
   endScope,
   addArg,
   addVar,
   beginFun,
   getFuns,
   lookupVar,
   lookupFun,
   getLocals,
   genFunLabel,
   addFun,
   isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv () {
  makeCompEnv (0, 0, emptyState (), 0, 0, {})
}

-- Accessor functions
fun genLabel (env) {
  env [0] ()
}

fun rememberFun (env, name, args, body) {
  env [1] (name, args, body)
}

fun beginScope (env) {
  env [2] ()
}

fun endScope (env) {
  env [3] ()
}

fun addArg (env, name) {
  env [4] (name)
}

fun addVar (env, name) {
  env [5] (name)
}

fun beginFun (env, state) {
  env [6] (state)
}

fun getFuns (env) {
  env [7] ()
}

fun lookupVar (env, name) {
  env [8] (name)
}

fun lookupFun (env, name) {
  env [9] (name)
}

fun getLocals (env) {
  env [10] ()
}

fun genFunLabel (env, name) {
  env [11] (name)
}

fun addFun (env, name, fLabel, nargs) {
  env [12] (name, fLabel, nargs)
}

fun isGlobal (env) {
  env [13] ()
}

-- Helper function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then singleton (env)
    else case genLabel (env) of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs (env, names) {
  foldl (fun (env, name) {addArg (env, name)}, env, names)
}

-- Helper function: adds a bunch of locals
fun addVars (env, names) {
  foldl (fun (env, name) {addVar (env, name)}, env, names)
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.


-- Some guidelines for compiling functions and scopes.
--
-- 1. use env.beginScope/env.endScope properly;
-- 2. in each scope traverse the definitions twice:
--    a. first, add all bindings into symbolic state,
--       using end.addVar/env.addFun;
--    b. do not forget to generate GLOBAL instructions for
--       top-level variable declarations;
--    c. on the secord traversal add functions themselves for
--       future code generation (use env.rememberFun).
-- 3. the overall flow for codegeneration:
--    a. generate the code for thetopmost expression (the progrman itself);
--    b. take list of nested functions definitions via env.getFuns and
--       generate the code for each function;
--    c. repeat b. until no function definitions appear.
-- 4. when compiling functions, do not forget to create proper
--    environment (use env.beginFun) and register arguments
--    (use env.addArg).

public fun compileSM (expr) {
  fun defsReducer([env, functions, global], def) {
    case def of
      Local (vars) -> [addVars(env, vars),
                       functions,
                       if isGlobal(env) then
                         {map(fun (var) {GLOBAL (var)}, vars), global}
                       else global fi]
    | Fun (f, args, body) -> case genFunLabel(env, f) of
                               [l, env] -> [addFun(env, f, l, args.size),
                                            [l, args, body] : functions, global]
                             esac
    esac
  }

  fun functionsReducer(env, [l, args, body]) {
    rememberFun(env, l, args, body)
  }

  fun argsReducer([env, res], arg) {
    case compile(env, arg) of
      [env, arg] -> [env, {res, arg}]
    esac
  }

  fun compile (env, expr) {
    case expr of
      Skip -> [env, {}]
    | Read (var) -> [env, {READ, ST (lookupVar(env, var)), DROP}]
    | Write (expr) -> case compile(env, expr) of
                        [env, res] -> [env, {res, WRITE}]
                      esac
    | Assn (var, expr) -> case var of
                            ElemRef (a, i) ->
                              case compile(env, a) of
                                [env, res1] ->
                                  case compile(env, i) of
                                    [env, res2] ->
                                      case compile(env, expr) of
                                        [env, res3] -> [env, {res1, res2, res3, STA}]
                                      esac
                                  esac
                              esac
                          | _ -> case compile(env, var) of
			            [env, res1] ->
			              case compile(env, expr) of
			                [env, res2] -> [env, {res1, res2, STI}]
			              esac
			          esac
                          esac
    | Seq (expr1, expr2) -> case compile(env, expr1) of
                             [env, res1] -> case compile(env, expr2) of
                                              [env, res2] -> [env, {res1, res2}]
                                            esac
                           esac
    | If (expr, s1, s2) -> case genLabels(env, 2) of
                             [l1, l2, env] ->
                               case compile(env, s1) of
                                 [env, res1] ->
                                   case compile(env, s2) of
                                     [env, res2] ->
                                       case compile(env, expr) of
                                         [env, res3] -> [env, {res3,
                                                               CJMP ("z", l1),
                                                               res1,
                                                               JMP (l2),
                                                               LABEL (l1),
                                                               res2,
                                                               LABEL (l2)}]
                                       esac
                                   esac
                               esac
                           esac
    | While (expr, s) -> case genLabels(env, 2) of
                           [l1, l2, env] ->
                             case compile(env, s) of
                               [env, res1] ->
                                 case compile(env, expr) of
                                   [env, res2] -> [env, {JMP (l2),
                                                         LABEL (l1),
                                                         res1,
                                                         LABEL (l2),
                                                         res2,
                                                         CJMP ("nz", l1)}]
                                 esac
                             esac
                         esac
    | Repeat (s, expr) -> case genLabel(env) of
                            [l, env] ->
                              case compile(env, s) of
                                [env, res1] ->
                                  case compile(env, expr) of
                                    [env, res2] -> [env, {LABEL (l), res1, res2, CJMP("z", l)}]
                                  esac
                              esac
                          esac
    | Const (const) -> [env, {CONST (const)}]
    | Var (var) -> [env, {LD (lookupVar(env, var))}]
    | Ref (var) -> [env, {LDA (lookupVar(env, var))}]
    | Binop (op, expr1, expr2) -> case compile(env, expr1) of
                                    [env, res1] ->
                                      case compile(env, expr2) of
                                        [env, res2] -> [env, {res1, res2, BINOP (op)}]
                                      esac
                                  esac
    | Ignore (expr) -> case compile(env, expr) of
                         [env, res] -> [env, {res, DROP}]
                       esac
    | Call (f, args) -> case f of
                          "read" -> [env, {READ}]
                        | "write" -> case args of
                                       {arg} -> case compile(env, arg) of
                                                  [env, res] -> [env, {res, WRITE}]
                                                esac
                                     esac
                        | _ -> case args of
                                 {} -> case lookupFun(env, f) of
                                         Fun (l, n) -> [env, {CALL (l, n)}]
                                       esac
                               | _ -> case foldl(argsReducer, [env, {}], args) of
                                        [env, res] -> case lookupFun(env, f) of
                                                        Fun (l, n) -> [env, {res, CALL (l, n)}]
                                                      esac
                                      esac
                               esac
                        esac
    | Scope (defs, expr) -> case foldl(defsReducer, [beginScope(env), {}, {}], defs) of
                              [env, functions, global] -> case compile(foldl(functionsReducer, env, functions), expr) of
                                                            [env, res] -> [endScope(env), {global, res}]
                                                          esac
                            esac
    | String (str) -> [env, {STRING (str)}]
    | Array (args) -> case foldl(argsReducer, [env, {}], args) of
                        [env, res] -> [env, {res, ARRAY (args.size)}]
                      esac
    | Elem (a, i) -> case compile(env, a) of
                       [env, a] -> case compile(env, i) of
                                     [env, i] -> [env, {a, i, ELEM}]
                                   esac
                     esac
    | Builtin (f, args) -> case foldl(argsReducer, [env, {}], args) of
                             [env, res] -> [env, {res, BUILTIN (f, args.size)}]
                           esac
    esac
  }

  fun compileFunctions(env, res, functions) {
    case functions of
      Fun (l, args, body, state) : functions ->
        case compile(addArgs(beginFun(env, state), args), body) of
          [env, res1] -> compileFunctions(env, {res,
                                                LABEL (l),
                                                BEGIN (l, args.size, getLocals(env)),
                                                res1,
                                                END}, functions)
        esac
    | {} -> case getFuns(env) of
              [functions, env] -> case functions of
                                    {} -> res
                                  | _ -> compileFunctions(env, res, functions)
                                  esac
            esac
    esac
  }

  case compile(beginScope(initCompEnv()), expr) of
    [env, res] -> deepFlatten(compileFunctions(env, {LABEL ("main"),
                                         BEGIN ("main", 0, getLocals(env)),
                                         res,
                                         END}, {}))
  esac
}
