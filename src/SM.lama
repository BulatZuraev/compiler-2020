-- Stack machine.

import List;
import World;
import State;
import Expr;
import Util;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval ([stack, st, w], insns) {
  case insns of
    Binop (op) : insns1 -> case stack of
                             y : stack1 -> case stack1 of
                                             x : stack2 -> eval ([applyBinop (op, x, y) : stack2, st, w], insns1)
                                           esac
                           esac
  | Const (const) : insns1 -> eval ([const : stack, st, w], insns1)
  | Read : insns1 -> case w.readWorld of
                       [val, w1] -> eval ([val : stack, st, w1], insns1)
                     esac
  | Write : insns1 -> case stack of
                        z : stack1 -> eval ([stack1, st, writeWorld (z, w)], insns1)
                      esac
  | LD (var) : insns1 -> eval ([st (var) : stack, st, w], insns1)
  | ST (var) : insns1 -> case stack of
                           z : stack1 -> eval ([stack1, st <- [var, z], w], insns1)
                         esac
  | {} -> [stack, st, w]
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list (of, possibly, lists)
-- of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Const (const) -> {Const (const)}
  | Var (var) -> {LD (var)}
  | Binop (op, expr1, expr2) -> {compileExpr(expr1), compileExpr(expr2), Binop (op)}.deepFlatten
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
    Seq (s1, s2) -> {compileSM(s1), compileSM(s2)}.deepFlatten
  | Read (var) -> {Read, ST (var)}
  | Write (expr) -> {compileExpr(expr), Write}.deepFlatten
  | Assn (var, expr) -> {compileExpr(expr), ST (var)}.deepFlatten
  esac
}
