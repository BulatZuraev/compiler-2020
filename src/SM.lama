-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Util;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    Read         -> sprintf ("READ")
  | Write        -> sprintf ("WRITE")
  | Binop (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | Const (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  local map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration


fun eval (env, c@[stack, st, w], insns) {
  case insns of
    Binop (op) : insns1 -> case stack of
                             y : stack1 -> case stack1 of
                                             x : stack2 -> eval (env, [applyBinop (op, x, y) : stack2, st, w], insns1)
                                           esac
                           esac
  | Const (const) : insns1 -> eval (env, [const : stack, st, w], insns1)
  | Read : insns1 -> case w.readWorld of
                       [val, w1] -> eval (env, [val : stack, st, w1], insns1)
                     esac
  | Write : insns1 -> case stack of
                        z : stack1 -> eval (env, [stack1, st, writeWorld (z, w)], insns1)
                      esac
  | LD (var) : insns1 -> eval (env, [st (var) : stack, st, w], insns1)
  | ST (var) : insns1 -> case stack of
                           z : stack1 -> eval (env, [stack1, st <- [var, z], w], insns1)
                         esac
  | LABEL (_) : insns1 -> eval (env, c, insns1)
  | JMP (l) : insns1 -> eval (env, c, fromLabel (insns1, l))
  | CJMP (c, l) : insns1 -> case c of 
                              "z" -> case stack of
                                       0 : stack1 -> eval (env, [stack1, st, w], fromLabel (env, l))
                                     | _ : stack1 -> eval (env, [stack1, st, w], insns1)
                                     esac
                            | "nz" -> case stack of
                                        0 : stack1 -> eval (env, [stack1, st, w], insns1)
                                      | _ : stack1 -> eval (env, [stack1, st, w], fromLabel (env, l))
                                      esac
                            esac
  | {} -> [stack, st, w]
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then singleton (env)
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list (of, possibly, lists)
-- of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Const (const) -> {Const (const)}
  | Var (var) -> {LD (var)}
  | Binop (op, expr1, expr2) -> {compileExpr(expr1), compileExpr(expr2), Binop (op)}
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun compile (env, stmt) {
    case stmt of
      Skip -> [env, {}]
    | Read (var) -> [env, {Read, ST (var)}]
    | Write (expr) -> [env, {compileExpr (expr), Write}]
    | Assn (var, expr) -> [env, {compileExpr (expr), ST (var)}]
    | Seq (s1, s2) -> case compile (env, s1) of
                        [env1, list1] ->
                          case compile (env1, s2) of
                            [env2, list2] -> [env2, {list1, list2}]
                          esac
                      esac
    | If (expr, s1, s2) -> case genLabels (env, 2) of
                             [stmtLabel, endLabel, env1] -> 
                               case compile (env1, s1) of 
                                 [env2, list1] ->
                                   case compile (env2, s2) of 
                                     [env3, list2] -> [env3, {compileExpr (expr),
                                                              CJMP ("z", stmtLabel),
                                                              list1,
                                                              JMP (endLabel),
                                                              LABEL (stmtLabel),
                                                              list2,
                                                              LABEL (endLabel)}]
                                   esac
                               esac
                           esac
    | While (expr, s) -> case genLabels (env, 2) of
                           [condLabel, bodyLabel, env1] -> 
                             case compile (env1, s) of 
                               [env2, list] -> [env2, {JMP (condLabel),
                                                      LABEL (bodyLabel),
                                                      list,
                                                      LABEL (condLabel),
                                                      compileExpr (expr),
                                                      CJMP("nz", bodyLabel)}]
                             esac
                         esac
    | Repeat (s, expr) -> case genLabel (env) of
                            [bodyLabel, env1] -> 
                              case compile (env1, s) of 
                                [env2, list] -> [env2, {LABEL (bodyLabel),
                                                        list,
                                                        compileExpr (expr),
                                                        CJMP ("z", bodyLabel)}]
                              esac
                          esac
    esac
  }
  compile (initCompEnv (), stmt)[1].deepFlatten
}
