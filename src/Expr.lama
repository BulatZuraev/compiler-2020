-- Expression evaluator

import List;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
public fun evalExpr (st, expr) {
  case expr of
    Const (const) -> return const
  | Var (var) -> return st (var)
  | Binop (op, expr1, expr2) -> return applyBinop (op, evalExpr (st, expr1), evalExpr (st, expr2))
  esac;
  return
}

public fun applyBinop (op, a, b) {
  case op of
    "+" -> return a + b
  | "-" -> return a - b
  | "*" -> return a * b
  | "/" -> return a / b
  | "%" -> return a % b
  | "==" -> return a == b
  | "!=" -> return a != b
  | "<" -> return a < b
  | "<=" -> return a <= b
  | ">" -> return a > b
  | ">=" -> return a >= b
  | "&&" -> return a && b
  | "!!" -> return a !! b
  esac;
  return
}
