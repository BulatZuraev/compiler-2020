-- Expression evaluator

import List;
import Array;
import State;
import World;
import Lexer;
import Parser;
import Builtins;

-- As association map which maps "\otimes" into "\oplus"
local ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        if      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        Repeat  (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Call    (string, expr list)  |
--        Ignore  (expr)               |
--        String  (string)             |
--        Array   (expr list)          |
--        Elem    (expr, expr)         |
--        ElemRef (expr, expr)         |
--        Builtin (string, expr list)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun lookupVal (state, name) {
  case state.lookup (name) of
    x@Val (_) -> x
  | _         -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun lookupFun (state, name) {
  case state.lookup (name) of
    x@Fun (_, _) -> x
  | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Val (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, val] -> [c, val : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun evalDecls(st, decls) {
  case decls of
    decl : decls -> case decl of
                      Local (vars) -> evalDecls(addNames(st, vars), decls)
                    | Fun (f, args, body) -> evalDecls(addFunction(st, f, args, body), decls)
                    esac
  | {} -> st
  esac
}

fun createVars(st, vars, vals) {
  case vars of
    var : vars -> case vals of
                    val : vals -> createVars(addName(st, var, Var (val)), vars, vals)
                  esac
  | {} -> st
  esac
}

fun eval (c@[st, w], expr) {
  case expr of
    Const (const) -> [c, const]
  | Var (var) -> case lookup(st, var) of
                   Var (var) -> [c, var]
                 esac
  | Binop (op, l, r) -> case evalList(c, {l, r}) of
                         [c, {l, r}] -> [c, evalOp(op, l, r)]
                        esac
  | Skip -> [c, Void]
  | Seq (s1, s2) -> case evalList(c, {s1, s2}) of
                      [c, {_, val}] -> [c, val]
                    esac
  | Assn (var, expr) -> case evalList(c, {var, expr}) of
                          [[st, w], {Ref (var), val}] -> [[st <- [var, Var (val)], w], val]
                        | [c, {ElemRef (a, i), val}] -> a[i] := val;
                                                        [c, val]
                        esac
  | If (expr, s1, s2) -> case eval(c, expr) of
                           [c, val] -> eval(c, if val then s1 else s2 fi)
                         esac
  | While (expr1, s) -> case eval(c, expr1) of
                          [c, val] -> if val then
                            case evalList(c, {s, expr}) of
                              [c, {_, val}] -> [c, val]
                            esac
                          else [c, Void] fi
                        esac
  | Repeat (s, expr) -> case evalList(c, {s, While (Binop ("==", expr, Const (0)), s)}) of
                          [c, {_, val}] -> [c, val]
                        esac
  | Ref (var) -> [c, Ref (var)]
  | Ignore (expr) -> case eval(c, expr) of
                       [c, _] -> [c, Void]
                     esac
  | Call (f, args) ->
      case lookup(st, f) of
        Fun (vars, expr) ->
          case evalList(c, args) of
            [[st, w], vals] ->
              case expr of
                External -> case evalBuiltin(f, vals, w) of
                              [val, w] -> [[st, w], val]
                            esac
              | _ -> case eval([createVars(enterFunction(st), vars, vals), w], expr) of
                       [[st1, w], val] -> [[leaveFunction(st, st1.getGlobal), w], val]
                     esac
              esac
          esac
      esac
  | Scope (decls, e) -> case evalDecls(enterScope(st), decls) of
                          st -> case eval([st, w], e) of
                            [[st, w], val] -> [[leaveScope(st), w], val]
                          esac
                        esac
  | String (str) -> [c, str]
  | Array (args) -> case evalList(c, args) of
                      [c, vals] -> [c, listArray(vals)]
                    esac
  | Elem (a, i) -> case evalList(c, {a, i}) of
                     [c, {a, i}] -> [c, a[i]]
                   esac
  | ElemRef (a, i) -> case evalList(c, {a, i}) of
                        [c, {a, i}] -> [c, ElemRef (a, i)]
                      esac
  | Builtin (f, args) -> case evalList(c, args) of
                           [[st, w], vals] -> case evalBuiltin(f, vals, w) of
                                               [val, w] -> [[st, w], val]
                                             esac
                         esac
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState ().enterScope.addName ("read", Fun ({}, External)).addName ("write", Fun (singleton ("a"), External)) , createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
